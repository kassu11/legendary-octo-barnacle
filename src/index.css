@layer reset, base, utility, components, layout, resize;

@layer reset {
  *, *::before, *::after {
    box-sizing: border-box;
    margin: 0;
  }

  body {
    -webkit-font-smoothing: antialiased;
  }

  img, picture, video, canvas, svg {
    display: block;
    max-width: 100%;
  }

  input, button, textarea, select {
    font: inherit;
    color: inherit;
    background-color: var(--background-500);
  }

  p, h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
  }
  p {
    text-wrap: pretty;
  }
  h1, h2, h3, h4, h5, h6 {
    text-wrap: balance;
  }

  #root {
    isolation: isolate;
  }

  video, audio {
    &:not([src]), &[src=""] {
      display: none;
    }
  }
}

@layer base {
  /* @link https://utopia.fyi/type/calculator?c=400,14,1.125,1240,16,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 */
  :root {
    --fs-200: clamp(0.64rem, 0.7158rem + -0.0978vw, 0.6914rem);
    --fs-300: clamp(0.7778rem, 0.7672rem + 0.0423vw, 0.8rem);
    --fs-400: clamp(0.875rem, 0.8155rem + 0.2381vw, 1rem);
    --fs-500: clamp(0.9844rem, 0.8579rem + 0.506vw, 1.25rem);
    --fs-600: clamp(1.1074rem, 0.8907rem + 0.8668vw, 1.5625rem);
    --fs-700: clamp(1.2458rem, 0.9091rem + 1.3472vw, 1.9531rem);
    --fs-800: clamp(1.4016rem, 0.9064rem + 1.9806vw, 2.4414rem);
    --fs-900: clamp(1.5768rem, 0.8744rem + 2.8095vw, 3.0518rem);

    --background-color: #000;
    --foreground-color: #fff;

    --neutral-color-875: color-mix(in oklch, var(--foreground-color), var(--background-color) 87.5%);
    --neutral-color-85: color-mix(in oklch, var(--foreground-color), var(--background-color) 85%);
    --neutral-color-825: color-mix(in oklch, var(--foreground-color), var(--background-color) 82.5%);
    --neutral-color-80: color-mix(in oklch, var(--foreground-color), var(--background-color) 80%);
    --neutral-color-75: color-mix(in oklch, var(--foreground-color), var(--background-color) 75%);
    --neutral-color-70: color-mix(in oklch, var(--foreground-color), var(--background-color) 70%);
    --neutral-color-60: color-mix(in oklch, var(--foreground-color), var(--background-color) 60%);
    --neutral-color-50: color-mix(in oklch, var(--foreground-color), var(--background-color) 50%);

    --background-800: var(--neutral-color-50);
    --background-700: var(--neutral-color-60);
    --background-600: var(--neutral-color-70);
    --background-500: var(--neutral-color-75);
    --background-400: var(--neutral-color-80);
    --background-350: var(--neutral-color-825);
    --background-300: var(--neutral-color-85);
    --background-200: var(--neutral-color-875);

    --bg-dark: var(--background-200);
    --bg: var(--background-400);
    --bg-light: var(--background-600);

    --lime-400: oklch(0.85 0.34 148.22);
    --crimson-400: oklch(0.66 0.29 10.59);
    --red-400: oklch(0.67 0.28 26.71);
    --red-100: oklch(0.05 0.28 26.71);
    --dark-blue-400: oklch(0.35 0.23 263.34);
    --gold-400: oklch(0.88 0.21 91.46);

    --text-500: oklch(0.97 0 0);
    --text-400: oklch(0.95 0 0);
    --text-350: oklch(0.90 0 0);
    --text-300: oklch(0.85 0 0);
    --text-200: oklch(0.65 0 0);

    --shadow-500: oklab(0 0 0 / .7);
    --shadow-450: oklab(0 0 0 / .75);
    --shadow-400: oklab(0 0 0 / .8);
    --shadow-300: oklab(0 0 0 / .9);
  }

  html {
    color-scheme: dark;
  }

  body {
    background-color: var(--background-color);
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    font-size: var(--fs-400);
    color: var(--text-400);
  }


  main#page-content {
    min-height: 100vh;
  }

  button {
    border: .1rem solid var(--background-600);
    border-radius: .25rem;
    cursor: pointer;
  }
}

@layer utility {
  .visually-hidden {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }

  .no-wrap {
    text-wrap: nowrap;
    white-space: nowrap;
  }

  .clean-link {
    color: inherit;
    text-decoration: none;
  }

  .absolute-inset {
    width: 100%;
    height: 100%;
    position: absolute;
  }

  .hidden {
    display: none;
  }

  .line-clamp {
    -webkit-box-orient: vertical;
    -webkit-line-clamp: var(--line-clamp, 3); 
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .list-status {
    width: 0.8em;
    height: 0.8em;
    margin-right: .25em;
    border-radius: 50%;
    display: inline-block;
    text-align: center;
    background-color: var(--status-color, purple);
  }

  [data-status="COMPLETED"] {
    --status-color: lime;
  }
  [data-status="CURRENT"] {
    --status-color: skyblue;
  }
  [data-status="DROPPED"] {
    --status-color: red;
  }
  [data-status="PAUSED"] {
    --status-color: crimson;
  }
  [data-status="PLANNING"] {
    --status-color: orange;
  }
  [data-status="REPEATING"] {
    --status-color: blue;
  }

  :where(ol, ul) {
    &:where(.grid-column-auto-fill, .grid-row-clamp, .grid-reel-auto-fill, .grid-reel-repeat, .flex-space-between) {
      list-style: none;
      padding: 0;
    }
  }


  .grid-center {
    display: grid;
    place-items: center;
  }

  .hide-if-empty:empty {
    display: none;
  }

  .flex-no-shrink {
    display: flex;
    gap: .5rem;
    flex-wrap: wrap;

    > * {
      flex-shrink: 0;
    }
  }

  .no-overflow {
    overflow: hidden;
  }

  .grid-column-auto-fill {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(min(100%, max(var(--grid-column-width, 20rem), 100% / var(--grid-max-column-count, 999) - var(--gap, .5rem))), 1fr));
    gap: var(--gap, .5rem);
  }

  .grid-column-auto-fit {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(100%, max(var(--grid-column-width, 20rem), 100% / var(--grid-max-column-count, 999) - var(--gap, .5rem))), 1fr));
    gap: var(--gap, .5rem);
  }

  .grid-row-clamp {
    display: grid;
    grid-template-rows: repeat(var(--grid-max-rows, 1), auto);
    grid-auto-rows: 0px;
    grid-column-gap: var(--gap, .5rem);
    grid-row-gap: 0;
    overflow: hidden;

    > * {
      margin-bottom: var(--gap, .5rem);
    }
  }

  .grid-reel-repeat {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: calc((100% / var(--amount, 8.5)) - (var(--gap, .5rem) - var(--gap, .5rem) / (var(--amount, 8.5) - 1)));
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    padding-inline: var(--padding, 1rem);
    scroll-padding: var(--padding, 1rem);
    gap: var(--gap, .5rem);
    /* Don't ask, but background color fixes the scrollbar for Chromium: 136.0.7103.93 */
    background-color: inherit;

    > * {
      scroll-snap-align: start;
    }
  }

  .grid-reel-auto-fill {
    --100: 100% + var(--spill-ration-correction-padding, var(--padding, 1rem));
    --round-distance: round(up, var(--100), var(--grid-column-width, 20rem));
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: calc(
      min(
        /* This part calculates the column size using: (100% - gap * (n-1)) / n */
                                                                              /* This variables makes it possible to cap column count, default 99 (uncapped) */
                                                                                                                                                                                           /* This part will add a very large number if the container width is too small or big */
                                                                                                                                                                                           /* This will invalidate the whole row, because we are inside min function (2*size > width >= size) */
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 0), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 1), var(--grid-max-column-count, 99))  + max((var(--round-distance) - var(--grid-column-width, 20rem) * 1) * 9999 , (var(--round-distance) - var(--grid-column-width, 20rem) * 1)  * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 1), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 2), var(--grid-max-column-count, 99))  + max((var(--round-distance) - var(--grid-column-width, 20rem) * 2) * 9999 , (var(--round-distance) - var(--grid-column-width, 20rem) * 2)  * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 2), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 3), var(--grid-max-column-count, 99))  + max((var(--round-distance) - var(--grid-column-width, 20rem) * 3) * 9999 , (var(--round-distance) - var(--grid-column-width, 20rem) * 3)  * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 3), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 4), var(--grid-max-column-count, 99))  + max((var(--round-distance) - var(--grid-column-width, 20rem) * 4) * 9999 , (var(--round-distance) - var(--grid-column-width, 20rem) * 4)  * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 4), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 5), var(--grid-max-column-count, 99))  + max((var(--round-distance) - var(--grid-column-width, 20rem) * 5) * 9999 , (var(--round-distance) - var(--grid-column-width, 20rem) * 5)  * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 5), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 6), var(--grid-max-column-count, 99))  + max((var(--round-distance) - var(--grid-column-width, 20rem) * 6) * 9999 , (var(--round-distance) - var(--grid-column-width, 20rem) * 6)  * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 6), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 7), var(--grid-max-column-count, 99))  + max((var(--round-distance) - var(--grid-column-width, 20rem) * 7) * 9999 , (var(--round-distance) - var(--grid-column-width, 20rem) * 7)  * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 7), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 8), var(--grid-max-column-count, 99))  + max((var(--round-distance) - var(--grid-column-width, 20rem) * 8) * 9999 , (var(--round-distance) - var(--grid-column-width, 20rem) * 8)  * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 8), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 9), var(--grid-max-column-count, 99))  + max((var(--round-distance) - var(--grid-column-width, 20rem) * 9) * 9999 , (var(--round-distance) - var(--grid-column-width, 20rem) * 9)  * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 9), var(--grid-max-column-count, 99))))  / min((var(--spill-ratio, .5) + 10), var(--grid-max-column-count, 99)) + max((var(--round-distance) - var(--grid-column-width, 20rem) * 10) * 9999, (var(--round-distance) - var(--grid-column-width, 20rem) * 10) * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 10), var(--grid-max-column-count, 99)))) / min((var(--spill-ratio, .5) + 11), var(--grid-max-column-count, 99)) + max((var(--round-distance) - var(--grid-column-width, 20rem) * 11) * 9999, (var(--round-distance) - var(--grid-column-width, 20rem) * 11) * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 11), var(--grid-max-column-count, 99)))) / min((var(--spill-ratio, .5) + 12), var(--grid-max-column-count, 99)) + max((var(--round-distance) - var(--grid-column-width, 20rem) * 12) * 9999, (var(--round-distance) - var(--grid-column-width, 20rem) * 12) * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 12), var(--grid-max-column-count, 99)))) / min((var(--spill-ratio, .5) + 13), var(--grid-max-column-count, 99)) + max((var(--round-distance) - var(--grid-column-width, 20rem) * 13) * 9999, (var(--round-distance) - var(--grid-column-width, 20rem) * 13) * -9999),
        ((var(--100)) - (var(--gap, .5rem) * min((var(--spill-ratio, .5) + 13), var(--grid-max-column-count, 99)))) / min((var(--spill-ratio, .5) + 14), var(--grid-max-column-count, 99)) + max((var(--round-distance) - var(--grid-column-width, 20rem) * 14) * 9999, (var(--round-distance) - var(--grid-column-width, 20rem) * 14) * -9999),
        var(--grid-column-width, 20rem) * 2
      )
    );
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    padding-inline: var(--padding, 1rem);
    scroll-padding: var(--padding, 1rem);
    gap: var(--gap, .5rem);
    /* Don't ask, but background color fixes the scrollbar for Chromium: 136.0.7103.93 */
    background-color: inherit;

    > * {
      scroll-snap-align: start;
    }
  }


  .grid-full-span {
    grid-column: 1/-1;
  }

  .full-width {
    width: 100%;
  }

  .dir-rtl {
    direction: rtl;
  }

  .flex {
    display: flex;
    gap: 8px;
  }

  .grid {
    display: grid;
    gap: 8px;
  }

  .flex-space-between {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: .5rem;
  }

  .flex-bullet-separator {
    display: flex;
    list-style: none;
    gap: 0 var(--gap, 2rem);
    padding: 0;
    flex-wrap: wrap;
    overflow: clip;

    > * {
      position: relative;

      &:not(:first-child)::before {
        content: "";
        position: absolute;
        width: var(--bullet-size, .4rem);
        height: var(--bullet-size, .4rem);
        top: calc(50% + .1em);
        transform: translateY(-50%) translateX(calc(var(--gap, 2rem) / -2 + -50%));
        border-radius: 100%;
        background-color: var(--text-200);
      }
    }
  }

  .inline-container {
    container-type: inline-size;
  }

  .cover {
    aspect-ratio: 5.5/8;
    object-fit: cover;
  }
}


@layer components {
  tool-tip2 {
    display: block;
    background-color: var(--bg-dark);
    width: max-content;
    padding: 4px 8px;
    border-radius: 4px;
    position: absolute;
    z-index: 1;

    &.left {
      right: calc(100% + 8px);
    }
    &.right {
      left: calc(100% + 8px);
    }
    &.left, &.right {
      top: 50%;
      transform: translateY(-50%);
    }

    :not(:hover, :focus-visible) > & {
      display: none;
    }

    :has(> &) {
      position: relative;
    }
  }


  .cp-media-card-container {
    container: media-cards / inline-size;
    --grid-column-width: 13rem;
    --gap: 16px;

    @container media-cards (width < calc(6 * 7em + 5 * 8px)) {
      > * {
        --grid-column-width: 7rem;
        --gap: 8px;
      }
    }
  }

  .cp-media-card-quick-action-items {
    position: absolute;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column-reverse;
    list-style: none;
    padding: 4px;
    gap: 4px;

  }

  .cp-media-action-item {
    position: relative;
    height: 32px;
    width: 32px;
    padding: 8px;
    border-radius: 50%;
    border: none;
    cursor: pointer;

    &.big {
      width: 48px;
      height: 48px;
      border-radius: 4px;
    }

    &:hover {
      background-color: grey;
    }

    svg {
      width: 100%;
      height: 100%;
    }
  }

  .cp-media-card {
    &:not(:has(.wrapper:hover), :has(:focus-visible)) .cp-media-card-quick-action-items {
      pointer-events: none;
      opacity: 0;
    }
    .cp-media-card-quick-action-items:not(:hover, :has(:focus-visible)) li:nth-child(n + 2) {
      pointer-events: none;
      opacity: 0;
      position: absolute;
    }

    &:not(:hover, :has(:focus-visible)) .recommendation-rating-wrapper {
      opacity: 0;
    }

    .wrapper {
      aspect-ratio: 5.5/8;
      position: relative;
      margin-bottom: 4px;
    }

    .absolute-inset {
      border-radius: 8px;
      object-fit: cover;
    }

    .recommendation-rating-wrapper {
      pointer-events: none;
      display: grid;
      align-items: end;
      padding: 8px;
      transition: backdrop-filter .2s;


      &:hover, &:has(:focus-visible) {
        backdrop-filter: blur(5px);
      }

      button {
        border: none;
        background: transparent;
        cursor: pointer;
        padding: 8px;

        &:hover, &:focus-visible {
          transform: scale(1.2);
        }

        &.active {
          color: var(--color, orange);
        }
      }

      .flex-space-between {
        background-color: var(--shadow-400);
        padding: 4px;
        padding-right: 8px;
        cursor: default;
        pointer-events: all;
        align-items: center;
        border-radius: 4px;
        font-weight: 500;

      }

      svg {
        width: 16px;
        height: 16px;
      }
    }

    .score {
      position: absolute;
      top: 8px;
      right: 8px;
      display: flex;
      width: max-content;
      gap: 0.5rem;
      align-items: center;
      background-color: var(--shadow-450);
      padding: 4px 8px;
      border-radius: 8px;

      @container (width < 12rem) {
        top: 4px;
        right: 4px;
      }

      svg {
        width: 1rem;
        height: 1rem;
        color: var(--gold-400);
      }
    }
  }

  .cp-character-card {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    gap: 8px;
    word-break: break-word;
    background-color: var(--bg);

    .grid-column-auto-fill:has(> &) {
      --grid-column-width: 25rem;
      &.manga {
        --grid-column-width: 20rem;
      }
    }

    .grid {
      padding-block: 8px;
      gap: 4px;
      align-content: space-between;
    }

    img {
      aspect-ratio: 5.5/8;
      object-fit: cover;
      width: 64px;
      height: 100%;
    }
  }

  .horizontal-search-card-section .grid-reel-auto-fill {
    margin-inline: -16px;
    --spill-ratio: 1;
    --padding: 16px;
    --spill-ration-correction-padding: 0px;
    --gap: 16px;
  }
}

@layer layout {
  .search-page {
    @container (width < calc(6 * 7em + 5 * 8px)) {
      .search-page-content {
        --grid-column-width: 7rem;
        --gap: 8px;
      }
    }
  }


  .user-profile-media-list-container {
    .horizontal-search-card {
      :not(:has(:hover), :has(:focus-visible)) .cp-media-action-item {
        opacity: 0;
      }

    }

    .cp-media-action-item {
      position: absolute;
      top: 4px;
      right: 4px;
    }
  }
}








/* Debugging styling */
/* html { */
/*   font-size: 32px; */
/* } */

/* * > * > * { */
/*   background-color: color-mix(in hsl, transparent, red 10%); */
/* } */
